# -*-makefile-gmake-*-
# Makefile.modinc includes rules for building HAL realtime modules outside
# the LinuxCNC source tree.  It has three useful targets:
#
# modules
#   Actually build the modules
#
# clean
#   Cleans up files made by 'modules'
#
# install
#   Installs the modules

# An example Makefile using Makefile.modinc to build one kernel module from a
# single source file would read:
# 
# obj-m += example.o
# include .../Makefile.modinc

# An example Makefile using Makefile.modinc to build one kernel module from
# several source files would read:
# 
# obj-m += complex.o
# complex-objs := complex1.o complex2.o complex_main.o
# include .../Makefile.modinc

# Currently this Makefile is only suitable for 'kbuild' and 'sim' systems, but
# there is no technical reason it cannot be extended to pre-kbuild systems.

# When there is a single module and it consists of a single source file, an
# easier way to build modules is to invoke 'comp':
#  comp --compile example.c
# or
#  comp --install example.c

ifeq ("$(origin V)", "command line")
  BUILD_VERBOSE = $(V)
endif
ifndef BUILD_VERBOSE
  BUILD_VERBOSE = 0
endif

ifeq ($(BUILD_VERBOSE),1)
  Q =
else
  Q = @
endif

ifeq "$(findstring s,$(MAKEFLAGS))" ""
ECHO=@echo
VECHO=echo
else
ECHO=@true
VECHO=true
endif


cc-option = $(shell if $(CC) $(CFLAGS) $(1) -S -o /dev/null -xc /dev/null \
             > /dev/null 2>&1; then echo "$(1)"; else echo "$(2)"; fi ;)

# Used in RTLIB_DIR path
KERNEL_VERS = $(shell uname -r)

# FIXME:  need better way to find correct KERNELDIR
KERNELDIR = /lib/modules/$(KERNEL_VERS)/build

# Threads systems
#################

# List of thread flavors to build modules
BUILD_THREAD_FLAVORS="@_BUILD_THREAD_FLAVORS@"

# If $(threads) is not set already, try running 'flavor'; if the
# result is empty or not in $(BUILD_THREAD_FLAVORS), pick the first
# item from $(BUILD_THREAD_FLAVORS).
threads ?= $(shell echo $(BUILD_THREAD_FLAVORS) | \
	awk -v f="`@EMC2_LIBEXEC_DIR@/flavor 2>/dev/null`" '\
	{ \
	    found=$$1; \
	    split($$0,flavs); \
	    for (val in flavs) \
		if (flavs[val] == f) found=f; \
	    print found; \
	}')

# Uppercase version of flavor name for use in variables
THREADS = $(shell echo $(threads) | tr a-z- A-Z_)

POSIX_THREADS_FLAVOR_ID=@RTAPI_POSIX_ID@
RT_PREEMPT_THREADS_FLAVOR_ID=@RTAPI_RT_PREEMPT_ID@
XENOMAI_THREADS_FLAVOR_ID=@RTAPI_XENOMAI_ID@
THREAD_FLAVOR_ID=$($(THREADS)_THREADS_FLAVOR_ID)

POSIX_THREADS_RTFLAGS = @POSIX_THREADS_RTFLAGS@
RT_PREEMPT_THREADS_RTFLAGS = @RT_PREEMPT_THREADS_RTFLAGS@
XENOMAI_THREADS_RTFLAGS = @XENOMAI_THREADS_RTFLAGS@

THREADS_RTFLAGS = $($(THREADS)_THREADS_RTFLAGS) \
	-DTHREAD_FLAVOR_ID=$(THREAD_FLAVOR_ID)

RTFLAGS := -I. $(THREADS_RTFLAGS) \
	-DRTAPI -D_GNU_SOURCE -D_FORTIFY_SOURCE=0

EXTRA_CFLAGS := $(RTFLAGS) $(EXTRA_RTFLAGS) \
	-D__MODULE__ \
	$(call cc-option,-mieee-fp) \
	$(KERNEL_MATH_CFLAGS)

EXTRA_CFLAGS += -I@INCLUDE_DIR@
RTLIBDIR := @PROJECT_LIBEXEC_DIR@/$(threads)
LIBDIR := @PROJECT_LIB_DIR@

EXTRA_CFLAGS +=  -fPIC -g -funwind-tables
allmodules = $(patsubst %.o,%.so,$(obj-m))
modules: $(allmodules)

install: modules
	cp $(allmodules) $(DESTDIR)$(RTLIBDIR)/

getobjs = $(if $(filter undefined, $(origin $(1)-objs)), $(1).o, $($(1)-objs))
getsrcs = $(patsubst %.o,%.c,$(call getobjs,$(1)))

maks := $(patsubst %.o,.%.modinc,$(obj-m))
$(foreach mod,$(patsubst %.o,%,$(obj-m)),\
	$(eval $(mod).so: $(call getobjs,$(mod))))
%.o: %.c
	$(ECHO) Compiling realtime $<
	$(Q)$(CC) -o $@ $(EXTRA_CFLAGS) -c $<

.PHONY: %.so
%.so:
	$(ECHO) Linking $(notdir $@)
	$(Q)$(LD) -d -r -o $*.tmp $^
	$(Q)objcopy -j .rtapi_export -O binary $*.tmp $*.exported

	$(Q)(echo '{ global : '; tr -s '\0' <$*.exported | xargs -r0 printf '%s;\n' | grep .; echo 'local : * ; };') > $*.ver
	$(Q)$(CC) -shared -Bsymbolic $(LDFLAGS) -Wl,--version-script,$*.ver -o $@ $^ $(EXTRA_LDFLAGS)
	$(Q)ld -d -r -o $*.tmp $^
